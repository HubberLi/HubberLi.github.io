<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>线程</title>
    <link href="undefined2019/11/28/%E7%BA%BF%E7%A8%8B/"/>
    <url>2019/11/28/%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h4><p>运行的程序是一个进程，而线程是进程中最小的执行单位，一个进程至少包含一个线程。</p><blockquote><ul><li>串行：就拿酷狗来说，我选择了多个音乐下载，但一次只能下载一个，下载完这个，才能下载下一个</li><li>并行：并行可以同时下载多个歌曲</li></ul></blockquote><h4 id="什么是线程安全？"><a href="#什么是线程安全？" class="headerlink" title="什么是线程安全？"></a>什么是线程安全？</h4><p>借鉴网上看到的话：存在竞争的线程不安全，不存在竞争的线程就是安全的！</p><p>当多个线程访问某个方法时，不管你通过怎样的调用方式或者说这些线程如何交替的执行，我们在主程序中不需要去做任何的同步，这个类的结果行为都是我们设想的正确行为，那么我们就可以说这个类时线程安全的。</p><h4 id="线程安全实现的方法："><a href="#线程安全实现的方法：" class="headerlink" title="线程安全实现的方法："></a>线程安全实现的方法：</h4><h5 id="互斥同步-阻塞同步"><a href="#互斥同步-阻塞同步" class="headerlink" title="互斥同步(阻塞同步)"></a>互斥同步(阻塞同步)</h5><blockquote><p>在多个线程并发访问数据时，保证共享数据在同一个时刻只能被一个线程使用，主要的互斥同步手段有：</p><ul><li>synchronized关键字</li><li>重入锁（ReentrantLock）</li></ul></blockquote><h5 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h5><blockquote><p>该方法采用基于冲突检测的乐观并发策略。每个线程先进行操作，如果没有其他线程争用共享数据，则操作成功。如果共享数据有争用，产生冲突，那就再采取其他的补偿措施。</p><ul><li>CAS（compare and swap）</li></ul></blockquote><p>参考文献：<a href="https://blog.csdn.net/weixin_39843989/article/details/94409235" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39843989/article/details/94409235</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小技巧</title>
    <link href="undefined2019/11/28/%E6%8A%80%E5%B7%A7/"/>
    <url>2019/11/28/%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<ul><li>使用解压缩的方法，可以删除jar包中不需要的模块<br><img src="https://img-blog.csdnimg.cn/20191125210421514.png" srcset="undefined" alt=""></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开发常识</title>
    <link href="undefined2019/11/27/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B92/"/>
    <url>2019/11/27/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B92/</url>
    
    <content type="html"><![CDATA[<ul><li>maven是项目管理工具，svn是版本管理工具</li><li>snapshot为快照版本即非正式版本，release为正式发布版本</li><li>war包相当于一个web项目，不需要运行的工程可以打成jar包</li><li>为什么用分布式开发：项目大，考虑业务扩展性</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>svn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>依赖冲突</title>
    <link href="undefined2019/11/20/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>2019/11/20/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="依赖冲突："><a href="#依赖冲突：" class="headerlink" title="依赖冲突："></a>依赖冲突：</h3><p>通俗的意思是pom中引入的两个或多个jar包，依赖了同一个但是不同版本的jar包<br>例如:org.apache.struts依赖spirng-beans-3.0.5，spring-context依赖spring-beans-4.2.4，但是发现spirng-beans-3.0.5加入到工程中，而我们希望spring-beans-4.2.4加入工程，这时就会有冲突<br>解决方法有三种：</p><blockquote><p>1.依赖调节原则<br>maven自动按照下边的原则调解：<br>声明者优先原则<br>在pom文件定义依赖，先声明的依赖为准。<br><img src="https://img-blog.csdnimg.cn/20191124004451607.png" srcset="undefined" alt=""><br>测试：<br>如果将上边struts-spring-plugins和spring-context顺序颠倒(类比图片中的junit4.12和junit4.10的顺序颠倒)，系统将导入spring-beans-4.2.4。<br>分析：<br>由于spring-context在前边，以spring-context依赖的spring-beans-4.2.4为准，所以最终spring-beans-4.2.4添加到了工程中。<br>2.排除依赖<br>上边的问题也可以通过排除依赖方法辅助依赖调解，如下：<br>比如在依赖struts2-spring-plugin的设置中添加排除依赖，排除spring-beans，下边的配置表示：依赖struts2-spring-plugin，但排除struts2-spring-plugin所依赖的spring-beans。</p></blockquote><pre><code>    &lt;!-- struts2-spring-plugin依赖spirng-beans-3.0.5 --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;        &lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;        &lt;version&gt;2.3.24&lt;/version&gt;        &lt;!-- 排除 spring-beans--&gt;        &lt;exclusions&gt;            &lt;exclusion&gt;                &lt;groupId&gt;org.springframework&lt;/groupId&gt;                &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;            &lt;/exclusion&gt;        &lt;exclusion&gt;                &lt;groupId&gt;org.springframework&lt;/groupId&gt;                &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;/exclusion&gt;        &lt;/exclusions&gt;    &lt;/dependency&gt;</code></pre><blockquote><p>3.锁定版本（推荐使用）<br>面对众多的依赖，有一种方法不用考虑依赖路径、声明优化等因素可以采用直接锁定版本的方法确定依赖构件的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本的为准添加到工程中，此方法在企业开发中常用。首先父工程中pom.xml文件添加,如下的配置是锁定了spring-beans和spring-context的版本：<br><img src="https://img-blog.csdnimg.cn/20191124004439700.png" srcset="undefined" alt=""><br>注意：在工程中锁定依赖的版本并不代表在工程中添加了依赖，如果工程需要添加锁定版本的依赖则需要单独添加&lt;dependencies&gt;&lt;/dependencies&gt;标签，如下：<br><img src="https://img-blog.csdnimg.cn/20191124004426207.png" srcset="undefined" alt=""><br>上边添加的依赖并没有指定版本，原因是已在&lt;dependencyManagement&gt;中锁定了版本，所以在&lt;dependency&gt;下不需要再指定版本。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/11/17/hello-world/"/>
    <url>2019/11/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>